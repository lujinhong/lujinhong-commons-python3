# -*- coding: utf-8 -*-

"""
     AUTHOR: lujinhong
 CREATED ON: 2019年09月26日 10:59
    PROJECT: lujinhong-commons-python3
DESCRIPTION: TODO
"""

import math
import time


class PacingSimulation:

    init_tau = 0.01
    epsilon = 0.001
    init_rl = 0.98

    B_list = [300 for x in range(144)]
    C_list = [0 for x in range(144)]
    G = 9

    #概率区间累积人群规模。待日志打了后修正。
    cdf_list = [0.0000436,0.0001394,0.0002481,0.000369,0.0005006,0.0006285,0.0007963,0.0009691,0.001144,0.0013359,0.0015499,0.0017539,0.0019868,0.0021997,0.0024471,0.00269,0.0029738,0.0032549,0.0035714,0.003968,0.0043292,0.0047104,0.0051097,0.0055334,0.0059759,0.0064033,0.0069153,0.0074735,0.0080738,0.0087198,0.0093898,0.0101175,0.0110248,0.0118451,0.0127855,0.0138398,0.0148882,0.0160498,0.0174115,0.019053,0.0215621,0.0249426,0.0303493,0.0390074,0.0878132,0.2248572,0.2439869,0.2641069,0.2845616,0.3043083,0.3208321,0.3397428,0.3572117,0.3745094,0.38817,0.402189,0.4142427,0.4258871,0.4381238,0.4490545,0.4615388,0.4718464,0.4818396,0.4906738,0.5008105,0.5107807,0.5210632,0.5302868,0.5394124,0.5475367,0.5564553,0.5652757,0.5740318,0.5829561,0.5914048,0.5991872,0.6075363,0.6164631,0.6241939,0.6321824,0.6408844,0.6491694,0.6578686,0.6674804,0.6751698,0.6838848,0.6928411,0.7030435,0.711712,0.7216947,0.7332165,0.7430944,0.754809,0.7675442,0.781476,0.7963919,0.8128678,0.836398,0.8624534,1]
    cdf_list.reverse()
    pdf_list = [0.0000436,0.0000958,0.0001087,0.0001209,0.0001316,0.0001279,0.0001678,0.0001728,0.0001749,0.0001919,0.000214,0.000204,0.0002329,0.0002129,0.0002474,0.0002429,0.0002838,0.0002811,0.0003165,0.0003966,0.0003612,0.0003812,0.0003993,0.0004237,0.0004425,0.0004274,0.000512,0.0005582,0.0006003,0.000646,0.00067,0.0007277,0.0009073,0.0008203,0.0009404,0.0010543,0.0010484,0.0011616,0.0013617,0.0016415,0.0025091,0.0033805,0.0054067,0.0086581,0.0488058,0.137044,0.0191297,0.02012,0.0204547,0.0197467,0.0165238,0.0189107,0.0174689,0.0172977,0.0136606,0.014019,0.0120537,0.0116444,0.0122367,0.0109307,0.0124843,0.0103076,0.0099932,0.0088342,0.0101367,0.0099702,0.0102825,0.0092236,0.0091256,0.0081243,0.0089186,0.0088204,0.0087561,0.0089243,0.0084487,0.0077824,0.0083491,0.0089268,0.0077308,0.0079885,0.008702,0.008285,0.0086992,0.0096118,0.0076894,0.008715,0.0089563,0.0102024,0.0086685,0.0099827,0.0115218,0.0098779,0.0117146,0.0127352,0.0139318,0.0149159,0.0164759,0.0235302,0.0260554,0.1375466]
    pdf_list.reverse()
    #概率区间的转化率 TODO:需要考虑0的情况。
    R_list = [0.028188865,0.017966517,0.010547132,0.013256007,0.009666506,0.00917627,0.010925819,0.00872818,0.007150802,0.006681514,0.00712897,0.005054152,0.005071106,0.005019685,0.005525346,0.003899411,0.004298302,0.00322914,0.00286533,0.003392166,0.003549792,0.003373392,0.002503414,0.002268365,0.002253467,0.002392839,0.002388742,0.002088721,0.001888073,0.001741919,0.001574252,0.00158632,0.001467085,0.001347285,0.001264632,0.001283162,0.000999678,0.001030069,0.000733852,0.000669344,0.000318218,0.000792917,0.000614553,0.000829101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    R_list.reverse()
    #请求QPS。某一天的数据，可以考虑多天平均。
    req_list = [18809,25768,24810,22980,21001,19304,17689,16525,15166,13920,12840,11543,10672,10098,9457,8759,8242,7796,7288,6949,6540,6169,5961,5729,5375,5218,5020,4870,4738,4731,4633,4722,4817,5011,5351,5869,6511,7711,8953,10104,11554,12805,13792,15103,16003,16449,17360,17798,18015,18968,19644,19579,20082,20539,20859,20874,21379,21309,21721,22275,22620,23191,23704,24005,24463,25153,25396,26022,26250,26167,26953,27404,28070,29455,31585,32455,30734,30420,31880,30995,30721,29689,28853,27914,27035,26450,26416,26303,26315,26416,25386,26085,26334,25863,26720,26508,26978,28467,28390,28484,28121,29744,28194,29684,30316,29348,29612,30463,29117,29695,29953,30041,30951,29737,30427,27752,27242,30207,24958,24261,21657,29165,24114,24082,24658,25486,25375,26200,26527,27498,27298,28345,28243,28864,29265,28871,27974,28225,26884,26264,25193,23866,22922,21339]
    #CPM。用活动
    cpm_list = [31.01265823,35.67567568,36.84931507,38.10344828,35.78947368,42.09302326,37.88461538,33.70967742,34.05797101,35.46391753,34.64646465,36.82692308,37.72727273,40.56179775,39.78021978,39.49367089,40.38961039,38.21428571,39.3442623,38.67924528,39.58333333,37.44680851,36.42857143,32.43902439,36.66666667,33.06451613,35.23076923,35.93220339,38.03921569,36.66666667,33.88888889,35.18518519,34.47368421,35.27777778,32.02380952,33.82716049,31.82926829,31.36,31.53846154,36.18090452,34.76415094,34.84304933,35.13043478,36.36734694,36.25,36.26415094,36.30136986,36.2745098,35.16014235,38.06228374,36.42611684,38.67768595,41.20603015,39.81927711,41.08433735,42.60162602,38.33333333,43.79310345,39.83606557,40.66666667,40.86206897,38.4375,41.69491525,44.07407407,41.45454545,42.34375,42.89473684,43.77358491,44.33962264,43.72093023,42.53521127,44.53488372,40.56818182,39.20454545,36.41791045,36.07843137,41.66666667,38.57142857,42.25806452,42.72727273,40.22222222,42.70833333,44.41860465,45.5,42.5,40.41666667,41.4,39.44444444,41.05263158,45,37.5,43.23529412,41.46341463,40.83333333,45.20833333,42.04545455,44.25925926,43.93939394,41.04166667,38.03278689,39.85074627,41.53846154,41.31578947,36.36363636,42.2,42.60869565,43.90243902,42.87878788,41.19402985,42.94117647,37.64705882,41.92771084,40,37.77777778,39.39759036,41.25,43.7254902,39.55555556,43.33333333,40.88888889,44.05405405,36.82926829,40,36.13636364,36.42857143,39.45454545,43.26530612,41.47540984,36.13861386,37.92307692,35,37.69230769,35.47486034,37.13414634,38.21989529,37.42857143,36.23287671,37.63157895,39.01639344,38.26086957,35.87628866,38.65168539,39.49367089,38.57142857]
    #从出价到曝光的比例。用流量资源的数据近似。
    W_list = [0.22007722,0.166433566,0.186946903,0.175726928,0.14171123,0.141109531,0.121806854,0.139664804,0.139881832,0.148545176,0.149840764,0.147404844,0.137735849,0.142857143,0.130691057,0.12918552,0.13097561,0.132216495,0.12122905,0.133701657,0.135329341,0.13525641,0.138926174,0.145801527,0.133201581,0.134136546,0.140248963,0.137004405,0.152132701,0.162557078,0.144554455,0.159487179,0.172432432,0.173369565,0.1875,0.193367347,0.187619048,0.187804878,0.175724638,0.173684211,0.163661972,0.165,0.1424821,0.131027254,0.135483871,0.124703557,0.130050505,0.106533575,0.096256684,0.095142379,0.087479407,0.084079602,0.082108626,0.077207063,0.073709677,0.074512987,0.070172684,0.066151468,0.066034985,0.072871573,0.064460432,0.087643678,0.059832636,0.05848564,0.057834395,0.055930087,0.057407407,0.060784314,0.056444444,0.056744705,0.057009346,0.06032888,0.059893048,0.069805527,0.082387476,0.084857143,0.086206897,0.083953033,0.085714286,0.085252141,0.086004057,0.084747583,0.082516704,0.08018648,0.073276904,0.080740741,0.080098888,0.072716049,0.07408805,0.074165637,0.064864865,0.068858561,0.068329177,0.074840358,0.074264706,0.069678218,0.067831325,0.068587571,0.07309008,0.071556551,0.083542857,0.075079197,0.07861991,0.090179514,0.093669528,0.101535088,0.107444444,0.107446809,0.108333333,0.1124197,0.104802561,0.122959739,0.104252999,0.107052023,0.109965238,0.116347382,0.134048257,0.131868132,0.139269406,0.165079365,0.156842105,0.139189189,0.163166397,0.170529801,0.168810289,0.174121406,0.167197452,0.165615142,0.171826625,0.192446043,0.179844961,0.19614711,0.180428135,0.179148311,0.171469741,0.169565217,0.177443609,0.164244186,0.156701031,0.154251701,0.14858156,0.148294434,0.143248175,0.144636015]

    #我们的方法
    def greey_linear_search_pacing(self, pre_rl=init_rl, tau=init_tau, time_slot=0, flag=0):
        # localtime = time.localtime(time.time())
        # time_slot = int((localtime.tm_hour * 60 + localtime.tm_min)/10)

        rl = pre_rl
        #截止当前时刻的预算误差
        E_cb = 0
        for i in range(0,time_slot):
            E_cb += (self.C_list[i] - self.B_list[i])
        #剩余时间段的所有预算
        remain_B = 0
        for i in range(time_slot,144):
            remain_B += self.B_list[time_slot]
        #经调整后，本次时间段需要消耗的费用
        modify_B = self.B_list[time_slot] - E_cb * self.B_list[time_slot] / remain_B

        while abs(tau) > self.epsilon and 0 < rl < 1:
            rl = rl + tau
            if rl > 1: rl = 1
            if rl < 0: rl = 0

            cost_rl = self.cdf_list[math.ceil(rl * 100)] * self.req_list[time_slot] * 60 * 10 * self.W_list[time_slot] * self.cpm_list[time_slot] / 1000.0
            conv_rl = 0 #避免分母为0
            for i in range(math.ceil(rl * 100) , 100):
                conv_rl += self.pdf_list[i] * self.req_list[time_slot] * 60 * 10  * self.W_list[time_slot] * self.R_list[i]
            Prl = cost_rl / conv_rl
            if Prl <= self.G and cost_rl <= modify_B:
                flag = 1
                tau = -abs(tau)
            else:
                if flag == 1:
                    rl = rl - tau
                    tau = tau/2.0
        #debu log begin
        cost_rl = self.cdf_list[math.ceil(rl * 100)] * self.req_list[time_slot] * 60 * 10 * self.W_list[time_slot] * self.cpm_list[time_slot] / 1000.0
        conv_rl = 0 #避免分母为0
        for i in range(math.ceil(rl * 100) , 100):
            conv_rl += self.pdf_list[i] * self.req_list[time_slot] * 60 * 10  * self.W_list[time_slot] * self.R_list[i]
        print(rl, cost_rl, conv_rl, cost_rl/conv_rl, modify_B)
        #long end
        self.C_list[time_slot] = cost_rl
        return rl

    #参考文献的方法
    def greey_linear_search_pacing_paper(self, pre_rl=init_rl, tau=init_tau, time_slot=0, flag=0):
        # localtime = time.localtime(time.time())
        # time_slot = int((localtime.tm_hour * 60 + localtime.tm_min)/10)

        rl = pre_rl
        #截止当前时刻的预算误差
        E_cb = 0
        for i in range(0,time_slot):
            E_cb += (self.C_list[i] - self.B_list[i])
        #剩余时间段的所有预算
        remain_B = 0
        for i in range(time_slot,144):
            remain_B += self.B_list[time_slot]
        #经调整后，本次时间段需要消耗的费用
        modify_B = self.B_list[time_slot] - E_cb * self.B_list[time_slot] / remain_B

        while abs(tau) > self.epsilon and 0 < rl < 1:
            rl = rl + tau
            if rl > 1: rl = 1
            if rl < 0: rl = 0

            cost_rl = self.cdf_list[math.ceil(rl * 100)] * self.req_list[time_slot] * 60 * 10 * self.W_list[time_slot] * self.cpm_list[time_slot] / 1000.0
            conv_rl = 0 #避免分母为0
            for i in range(math.ceil(rl * 100) , 100):
                conv_rl += self.pdf_list[i] * self.req_list[time_slot] * 60 * 10  * self.W_list[time_slot] * self.R_list[i]
            Prl = cost_rl / conv_rl
            if cost_rl <= modify_B:
                flag = 1
                tau = -abs(tau)
            else:
                if flag == 1:
                    rl = rl - tau
                    tau = tau/2.0
        #debu log begin
        cost_rl = self.cdf_list[math.ceil(rl * 100)] * self.req_list[time_slot] * 60 * 10 * self.W_list[time_slot] * self.cpm_list[time_slot] / 1000.0
        conv_rl = 0 #避免分母为0
        for i in range(math.ceil(rl * 100) , 100):
            conv_rl += self.pdf_list[i] * self.req_list[time_slot] * 60 * 10  * self.W_list[time_slot] * self.R_list[i]
        print(rl, cost_rl, conv_rl, cost_rl/conv_rl, modify_B)
        #long end
        self.C_list[time_slot] = cost_rl
        return rl

if __name__ == '__main__':
    ps = PacingSimulation()
    for i in range(0,144):
        rl = ps.greey_linear_search_pacing(pre_rl= 0.98, time_slot=i)
        # print(rl)